import os
import math
import pandas as pd
import requests
from pathlib import Path
from PIL import Image, ImageDraw
import torch
import joblib
from sklearn.preprocessing import StandardScaler
import streamlit as st
import urllib.parse

# -------------------------
# ุฅุนุฏุงุฏุงุช ุนุงูุฉ
# -------------------------
# ุชุนููู ุฅุนุฏุงุฏุงุช ุตูุญุฉ Streamlit ูุซู ุงูุนููุงู ูุชูุณูู ุงูุตูุญุฉ.
st.set_page_config(page_title="ูุธุงู ุงูุชุดุงู ุญุงูุงุช ุงููุงูุฏ ุงูููุฑุจุงุฆู ุงููุญุชููุฉ ูููุฆุฉ ุงูุฒุฑุงุนูุฉ", layout="wide")

# ุฅุนุฏุงุฏุงุช API ููููุฑ ุงูุตูุงุนู
API_KEY = "AIzaSyAY7NJrBjS42s6upa9z_qgNLVXESuu366Q"  # ููุชุงุญ API ุงูุฎุงุต ุจู Google Maps
ZOOM = 15  # ูุณุชูู ุงูุชูุจูุฑ ููุตูุฑุฉ ุงูููุฑูุฉ
IMG_SIZE = 640  # ุญุฌู ุงูุตูุฑุฉ
MAP_TYPE = "satellite"  # ููุน ุงูุฎุฑูุทุฉ (ููุฑ ุตูุงุนู)

# ุฅุนุฏุงุฏุงุช ุงููุฌูุฏุงุช ูุงููุณุงุฑุงุช
IMG_DIR = "images"  # ูุณุงุฑ ุญูุธ ุตูุฑ ุงูููุฑ ุงูุตูุงุนู
DETECTED_DIR = "DETECTED_FIELDS/FIELDS/farms"  # ูุณุงุฑ ุญูุธ ุงูุตูุฑ ุจุนุฏ ุงูุชุญููู
MODEL_PATH = "best.pt"  # ูุณุงุฑ ูููุฐุฌ YOLOv5 ุงููุฏุฑุจ
ML_MODEL_PATH = "final_model.joblib"  # ูุณุงุฑ ูููุฐุฌ ุชุนูู ุงูุขูุฉ ุงููุฏุฑุจ
OUTPUT_EXCEL = "output/detected_low_usage.xlsx"  # ูุณุงุฑ ุญูุธ ููู ุงููุชุงุฆุฌ ุจุตูุบุฉ Excel

# ุชุญููู ูููุฐุฌ ุงูุจูุงูุงุช ุงููุทููุจ ุชุญูููู
st.subheader("๐ฅ ุชุญููู ูููุฐุฌ ุงูุจูุงูุงุช ุงููุทููุจ ุชุญูููู")
template_file = "fram.xlsx"  # ูุณุงุฑ ูููุฐุฌ ุงูุจูุงูุงุช
st.download_button("๐ฅ ุชุญููู ูููุฐุฌ ุงูุจูุงูุงุช", open(template_file, "rb"), file_name=template_file)

# ุชุนุฑูู ุงูุญุฏูุฏ ุงููุตูู ูุงุณุชููุงู ุงูุทุงูุฉ ุจูุงุกู ุนูู ุณุนุฉ ุงูููุงุทุน
capacity_thresholds = {
    20: 6000, 50: 15000, 70: 21000, 100: 30000, 150: 45000,
    200: 60000, 300: 90000, 400: 120000, 500: 150000
}

# ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงููุฌูุฏุงุช ุงูุถุฑูุฑูุฉุ ูุฅูุดุงุกูุง ุฅุฐุง ูู ุชูู ููุฌูุฏุฉ
Path(IMG_DIR).mkdir(parents=True, exist_ok=True)
Path(DETECTED_DIR).mkdir(parents=True, exist_ok=True)
Path("output").mkdir(parents=True, exist_ok=True)

# ุฅุนุฏุงุฏ ุงููุชุบูุฑุงุช ูุญูุธ ุงูุตูุฑ ูุงููุชุงุฆุฌ
gallery = set()
results = []

# -------------------------
# ุชุญููู ุตูุฑุฉ ุงูููุฑ ุงูุตูุงุนู
# -------------------------
def download_image(lat, lon, meter_id):
    img_path = os.path.join(IMG_DIR, f"{meter_id}.png")  # ุชุญุฏูุฏ ูุณุงุฑ ุงูุตูุฑุฉ ุจูุงุกู ุนูู ุฑูู ุงูุนุฏุงุฏ
    if os.path.exists(img_path):
        return img_path  # ุฅุฐุง ูุงูุช ุงูุตูุฑุฉ ููุฌูุฏุฉ ูุณุจููุงุ ุฅุนุงุฏุชูุง ูุจุงุดุฑุฉ
    base_url = "https://maps.googleapis.com/maps/api/staticmap"  # ุฑุงุจุท API ูุฎุฑุงุฆุท Google
    params = {
        "center": f"{lat},{lon}",  # ุชุญุฏูุฏ ุงูุฅุญุฏุงุซูุงุช
        "zoom": ZOOM,  # ุชุญุฏูุฏ ูุณุชูู ุงูุชูุจูุฑ
        "size": f"{IMG_SIZE}x{IMG_SIZE}",  # ุชุญุฏูุฏ ุญุฌู ุงูุตูุฑุฉ
        "maptype": MAP_TYPE,  # ููุน ุงูุฎุฑูุทุฉ (ููุฑ ุตูุงุนู)
        "key": API_KEY  # ููุชุงุญ API
    }
    try:
        response = requests.get(base_url, params=params, timeout=10)  # ุฅุฑุณุงู ุทูุจ ูุชุญููู ุงูุตูุฑุฉ
        if response.status_code == 200:
            with open(img_path, 'wb') as f:
                f.write(response.content)  # ุญูุธ ุงูุตูุฑุฉ
            return img_path
    except Exception as e:
        print(f"Error downloading image: {e}")  # ุทุจุงุนุฉ ุฃู ุฎุทุฃ ูุญุฏุซ ุฃุซูุงุก ุงูุชุญููู
        return None

# -------------------------
# ุชุญููู ุจูุณู ููุณุงุญุฉ
# -------------------------
def pixel_to_area(lat, box):
    scale = 156543.03392 * abs(math.cos(math.radians(lat))) / (2 ** ZOOM)  # ุญุณุงุจ ูุณุจุฉ ุชุญููู ุงูุจูุณู ูููุชุฑ
    width_m = abs(box[2] - box[0]) * scale  # ุญุณุงุจ ุนุฑุถ ุงูุญูู ุจุงููุชุฑ
    height_m = abs(box[3] - box[1]) * scale  # ุญุณุงุจ ุทูู ุงูุญูู ุจุงููุชุฑ
    return width_m * height_m  # ุฅุฑุฌุงุน ุงููุณุงุญุฉ ุจุงููุชุฑ ุงููุฑุจุน

# -------------------------
# ุชุญููู ุตูุฑุฉ ูุงุญุฏุฉ ุจู YOLOv5
# -------------------------
def detect_field(img_path, meter_id, info, model):
    results = model(img_path)  # ุงุณุชุฎุฏุงู ูููุฐุฌ YOLOv5 ูุงูุชุดุงู ุงูุญููู
    df_result = results.pandas().xyxy[0]  # ุชุญููู ุงููุชุงุฆุฌ ุฅูู DataFrame
    fields = df_result[df_result["name"] == "field"]  # ุงุณุชุฎุฑุงุฌ ุงูุญููู ูู ุงููุชุงุฆุฌ
    if not fields.empty:
        confidence = round(fields["confidence"].max() * 100, 2)  # ุญุณุงุจ ูุณุจุฉ ุงูุซูุฉ
        if confidence >= 85:  # ุฅุฐุง ูุงูุช ุงูุซูุฉ ุฃูุจุฑ ูู 85%
            image = Image.open(img_path).convert("RGB")  # ูุชุญ ุงูุตูุฑุฉ
            draw = ImageDraw.Draw(image)  # ุฑุณู ูุณุชุทูู ุญูู ุงูุญูู
            largest_field = fields.iloc[0]  # ุงูุญุตูู ุนูู ุฃูุจุฑ ุญูู
            box = [largest_field["xmin"], largest_field["ymin"], largest_field["xmax"], largest_field["ymax"]]  # ุชุญุฏูุฏ ูุณุชุทูู ุงูุญูู
            draw.rectangle(box, outline="green", width=3)  # ุฑุณู ุงููุณุชุทูู
            area = pixel_to_area(info['y'], box)  # ุญุณุงุจ ุงููุณุงุญุฉ
            draw.text((10, 10), f"ID: {meter_id}\nArea: {int(area)} mยฒ", fill="yellow")  # ุฅุถุงูุฉ ุงููุต ุนูู ุงูุตูุฑุฉ
            image_path = os.path.join(DETECTED_DIR, f"{meter_id}.png")  # ุญูุธ ุงูุตูุฑุฉ ุงููุนุฏูุฉ
            image.save(image_path)
            return confidence, image_path, int(area)  # ุฅุฑุฌุงุน ุงูุซูุฉุ ุงูุตูุฑุฉุ ูุงููุณุงุญุฉ
    return None, None, None

# -------------------------
# ุชุญุฏูุฏ ุงูุฃููููุฉ
# -------------------------
def determine_priority(has_field, anomaly, consumption_check, high_priority_condition):
    if high_priority_condition:  # ุชุญูู ูู ุงูุดุฑูุท ุฐุงุช ุงูุฃููููุฉ ุงูุนุงููุฉ
        return "ุฃููููุฉ ุนุงููุฉ ุฌุฏูุง"
    elif has_field and anomaly == 1 and consumption_check:
        return "ูุตูู"  # ุงูุฃููููุฉ ุงููุตูู ุฅุฐุง ูุงู ููุงู ุญูู ูุงูุงูุญุฑุงู ูุงูุงุณุชููุงู ุบูุฑ ุทุจูุนู
    elif has_field and (anomaly == 1 or consumption_check):
        return "ูุชูุณุทุฉ"  # ุงูุฃููููุฉ ุงููุชูุณุทุฉ ุฅุฐุง ูุงู ููุงู ุญูู ุฃู ุงูุงุณุชููุงู ุบูุฑ ุทุจูุนู
    elif has_field:
        return "ููุฎูุถุฉ"  # ุงูุฃููููุฉ ุงูููุฎูุถุฉ ุฅุฐุง ูุงู ููุงู ุญูู ูุงูุงุณุชููุงู ุทุจูุนู
    return "ุทุจูุนูุฉ"  # ุฅุฐุง ูู ูุชู ุงูุชุดุงู ุฃู ุดูุก

# -------------------------
# ุชุดุบูู ูููุฐุฌ ML ุนูู ุญุงูุฉ
# -------------------------
def predict_loss(info, model_ml):
    X = [[info["Breaker Capacity"], info["ุงููููุฉ"]]]  # ุฅุนุฏุงุฏ ุงูุจูุงูุงุช ูุงุณุชุฎุฏุงู ูููุฐุฌ ุชุนูู ุงูุขูุฉ
    scaler = StandardScaler()  # ูููุงุณ ุงูููุงุณ ุงูููุงุณู ููุจูุงูุงุช
    X_scaled = scaler.fit_transform(X)  # ุชุญููู ุงูุจูุงูุงุช
    return model_ml.predict(X_scaled)[0]  # ุงูุชูุจุค ุจุญุงูุฉ ุงููุงูุฏ ุจูุงุกู ุนูู ุงูุจูุงูุงุช

# -------------------------
# ุฒุฑ ูุดุงุฑูุฉ ุงูุญุงูุฉ ุนุจุฑ WhatsApp
# -------------------------
def generate_whatsapp_share_link(meter_id, confidence, area, location_link, quantity, capacity, office_number, priority):
    message = f"ุญุงูุฉ ุนุฏุงุฏ {meter_id}:\n" \
              f"ุฑูู ุงูููุชุจ: {office_number}\n" \
              f"ุฃููููุฉ ุงูุญุงูุฉ: {priority}\n" \
              f"ุซูุฉ: {confidence}%\n" \
              f"ูุณุงุญุฉ ุชูุฏูุฑูุฉ: {area} ูยฒ\n" \
              f"ูููุฉ ุงูุงุณุชููุงู: {quantity} ูููู\n" \
              f"ุณุนุฉ ุงููุงุทุน: {capacity} ุฃูุจูุฑ\n" \
              f"ุฑุงุจุท ุงููููุน: {location_link}"
    url = f"https://wa.me/?text={urllib.parse.quote(message)}"  # ุฅูุดุงุก ุฑุงุจุท ูุดุงุฑูุฉ ุนุจุฑ WhatsApp
    return url

# -------------------------
# ุนุฑุถ ูููุน ุงูุญุงูุฉ ุนูู Google Maps
# -------------------------
def generate_google_maps_link(lat, lon):
    return f"https://www.google.com/maps?q={lat},{lon}"  # ุฅูุดุงุก ุฑุงุจุท ููููุน ุงูุญุงูุฉ ุนูู ุฎุฑุงุฆุท Google

# -------------------------
# Streamlit
# -------------------------
# ุนุฑุถ ูุงุฌูุฉ ุงููุณุชุฎุฏู
st.title("๐ ูุธุงู ุงูุชุดุงู ุญุงูุงุช ุงููุงูุฏ ุงูููุฑุจุงุฆู ุงููุญุชููุฉ ูููุฆุฉ ุงูุฒุฑุงุนูุฉ")

uploaded_file = st.file_uploader("๐ ุงุฑูุน ููู ุงูุจูุงูุงุช (Excel)", type=["xlsx"])

if uploaded_file:
    df = pd.read_excel(uploaded_file)  # ุชุญููู ุงูุจูุงูุงุช ูู ููู Excel
    df["cont"] = df["ุงูุงุดุชุฑุงู"].astype(str).str.strip()  # ุชุญููู ุงูุนููุฏ ุฅูู ุณูุณูุฉ ูุตูุฉ
    df["ุงูููุชุจ"] = df["ุงูููุชุจ"].astype(str)  # ุงูุชุฃูุฏ ูู ุฃู "ุงูููุชุจ" ููุฌูุฏ ูุนููุฏ ูุตู
    df["ุงููููุฉ"] = pd.to_numeric(df["ุงููููุฉ"], errors="coerce")  # ุชุญููู ุงููููุฉ ุฅูู ุฃุฑูุงู

    # ุชุญููู ุงูููุงุฐุฌ ุงููุฏุฑุจุฉ
    model_yolo = torch.hub.load('ultralytics/yolov5', 'custom', path=MODEL_PATH, force_reload=True)
    model_ml = joblib.load(ML_MODEL_PATH)  # ุชุญููู ูููุฐุฌ ุชุนูู ุงูุขูุฉ

    st.success("โ ุชู ุฑูุน ุงูููู ุจูุฌุงุญ")
    progress = st.progress(0)  # ุดุฑูุท ุงูุชูุฏู

    download_placeholder = st.empty()  # Placeholder ูุชุญููู ุงูููู
    gallery_placeholder = st.empty()  # Placeholder ูุนุฑุถ ุงูุตูุฑ

    for idx, row in df.iterrows():  # ุชุญููู ุงูุจูุงูุงุช ููู ุณุทุฑ ูู ุงูููู
        meter_id = str(row["cont"])  # ุงูุญุตูู ุนูู ุฑูู ุงูุนุฏุงุฏ
        lat, lon = row['y'], row['x']  # ุฅุญุฏุงุซูุงุช ุงูุนุฏุงุฏ
        office_number = row["ุงูููุชุจ"]  # ุฑูู ุงูููุชุจ
        img_path = download_image(lat, lon, meter_id)  # ุชุญููู ุตูุฑุฉ ุงูููุฑ ุงูุตูุงุนู
        if img_path:
            # ุชุญููู ุงูุตูุฑุฉ ุจุงุณุชุฎุฏุงู YOLOv5
            conf, img_detected, area = detect_field(img_path, meter_id, row, model_yolo)
            if conf and (conf, img_detected) not in gallery:
                anomaly = predict_loss(row, model_ml)  # ุงูุชูุจุค ุจุญุงูุฉ ุงููุงูุฏ
                capacity_limit = capacity_thresholds.get(row['Breaker Capacity'], 0)  # ุชุญุฏูุฏ ุงูุญุฏ ุงูุฃูุตู ููุงุณุชููุงู
                consumption_check = row['ุงููููุฉ'] < 0.5 * capacity_limit  # ุงูุชุญูู ูู ุงูุงุณุชููุงู

                # ุฅุถุงูุฉ ุดุฑุท ุงูุฃููููุฉ ุงูุนุงููุฉ
                high_priority_condition = (conf >= 85 and row['ุงููููุฉ'] == 0) or (conf >= 85 and row['Breaker Capacity'] < 200)

                priority = determine_priority(conf >= 85, anomaly, consumption_check, high_priority_condition)  # ุชุญุฏูุฏ ุงูุฃููููุฉ

                # ุฅุถุงูุฉ ุงูุจูุงูุงุช ุฅูู ุงููุชุงุฆุฌ
                row["ูุณุจุฉ_ุงูุซูุฉ"] = conf
                row["ุงูุฃููููุฉ"] = priority
                row["ุงููุณุงุญุฉ"] = area
                results.append(row)
                gallery.add((conf, priority, img_detected, meter_id, area, lat, lon, row['ุงููููุฉ'], row['Breaker Capacity'], office_number))

                # ุชูููุฏ ุฑุงุจุท ุงููุดุงุฑูุฉ ุนุจุฑ WhatsApp
                location_link = generate_google_maps_link(lat, lon)
                whatsapp_link = generate_whatsapp_share_link(meter_id, conf, area, location_link, row['ุงููููุฉ'], row['Breaker Capacity'], office_number, priority)

                # ุญูุธ ุงููุชุงุฆุฌ ูู ููู Excel
                df_final = pd.DataFrame(results)
                with download_placeholder:
                    with open(OUTPUT_EXCEL, "wb") as f:
                        df_final.to_excel(f, index=False)
                    with open(OUTPUT_EXCEL, "rb") as f:
                        st.download_button("๐ฅ ุชุญููู ุงููุชุงุฆุฌ", data=f, file_name="detected_low_usage.xlsx", key=f"download_button_{len(results)}")

                # ุนุฑุถ ุงูุตูุฑ ูุน ุฃุฒุฑุงุฑ ุงููุดุงุฑูุฉ
                with gallery_placeholder.container():
                    # ุนุฑุถ ุงูุญุงูุงุช ุฐุงุช ุงูุฃููููุฉ ุงูุนุงููุฉ ุฃูููุง
                    high_priority = [entry for entry in gallery if entry[1] == "ุฃููููุฉ ุนุงููุฉ ุฌุฏูุง"]
                    other_priority = [entry for entry in gallery if entry[1] != "ุฃููููุฉ ุนุงููุฉ ุฌุฏูุง"]

                    # ุนุฑุถ ุงูุญุงูุงุช ุฐุงุช ุงูุฃููููุฉ ุงูุนุงููุฉ
                    cols = st.columns(6)
                    for i, (conf, priority, img_path, meter_id, area, lat, lon, quantity, capacity, office_number) in enumerate(high_priority):
                        with cols[i % 6]:
                            st.image(img_path, caption=f"ุนุฏุงุฏ: {meter_id}\nุซูุฉ: {conf}%\nูุณุงุญุฉ: {area} ูยฒ\n{priority}\nุงูููุชุจ: {office_number}\nุงููููุฉ: {quantity} ูููู ูุงุท\nุณุนุฉ ุงููุงุทุน: {capacity} ุฃูุจูุฑ", width=150)
                            st.markdown(f"๐ [ูุดุงุฑูุฉ]({whatsapp_link})")  # ุฑุงุจุท ุงููุดุงุฑูุฉ ุนุจุฑ WhatsApp
                            st.markdown(f"๐ [Google Maps]({location_link})")  # ุฑุงุจุท ุงููููุน ุนูู ุฎุฑุงุฆุท Google

                    # ุนุฑุถ ุจุงูู ุงูุญุงูุงุช
                    for i, (conf, priority, img_path, meter_id, area, lat, lon, quantity, capacity, office_number) in enumerate(other_priority):
                        with cols[i % 6]:
                            st.image(img_path, caption=f"ุนุฏุงุฏ: {meter_id}\nุซูุฉ: {conf}%\nูุณุงุญุฉ: {area} ูยฒ\n{priority}\nุงูููุชุจ: {office_number}\nุงููููุฉ: {quantity} ูููู ูุงุท\nุณุนุฉ ุงููุงุทุน: {capacity} ุฃูุจูุฑ", width=150)
                            st.markdown(f"๐ [ูุดุงุฑูุฉ]({whatsapp_link})")  # ุฑุงุจุท ุงููุดุงุฑูุฉ ุนุจุฑ WhatsApp
                            st.markdown(f"๐ [Google Maps]({location_link})")  # ุฑุงุจุท ุงููููุน ุนูู ุฎุฑุงุฆุท Google

        progress.progress((idx + 1) / len(df))  # ุชุญุฏูุซ ุดุฑูุท ุงูุชูุฏู
